Test Objectives

Identify possible entry and injection points through request and response analysis.

-

How to Test

Before any testing begins, the tester should always get a good understanding of the application and how the user and browser communicates with it. 
As the tester walks through the application, they should pay attention to all HTTP requests as well as every parameter and form field that is passed to the application. 
They should pay special attention to when GET requests are used and when POST requests are used to pass parameters to the application. 
In addition, they also need to pay attention to when other methods for RESTful (API) services are used.

Note that in order to see the parameters sent in the body of requests such as a POST request, the tester may want to use a tool such as an intercepting proxy (Burp). 
Within the POST request, the tester should also make special note of any hidden form fields that are being passed to the application, as these usually contain sensitive information, such
as state information, quantity of items, the price of items.

It has been very useful to use an intercepting proxy and a spreadsheet for this stage of testing. 

Take note of any interesting parameters in the URL, custom headers, or body of the requests/responses, and save them in a spreadsheet. 
The spreadsheet should include 
the page requested (it might be good to also add the request number from the proxy, for future reference), 
the interesting parameters, 
the type of request (GET, POST, etc), 
if access is authenticated/unauthenticated, 
if TLS is used, 
if it’s part of a multi-step process, 
if WebSockers are used, and 
any other relevant notes. 

Once you have every area of the application mapped out, then go through the application and test each of the areas that have been identified and make notes for what worked and what didn’t work.



Below are some points of interests for all requests and responses:

Requests-

Identify where GETs are used and where POSTs are used

Identify all parameters used in a POST request (these are in the body of the request).

Within the POST request, pay special attention to any hidden parameters. In addition, the next page shown, its data, and
the level of access can all be different depending on the value of the hidden parameter(s).

Identify all parameters used in a GET request (i.e., URL), in particular the query string (usually after a ? mark).

Identify all the parameters of the query string. These usually are in a pair format, such as foo=bar. Also note that
many parameters can be in one query string such as separated by a & , \~ , : , or any other special character or encoding.

A special note when it comes to identifying multiple parameters in one string or within a POST request is that some
or all of the parameters will be needed to execute the attacks. The tester needs to identify all of the parameters
(even if encoded or encrypted) and identify which ones are processed by the application. Later sections of the
guide will identify how to test these parameters. At this point, just make sure each one of them is identified.
Also pay attention to any additional or custom type headers not typically seen (such as debug: false ).

Responses-

Identify where new cookies are set ( Set-Cookie header), modified, or added to.
Identify where there are any redirects (3xx HTTP status code), 400 status codes, in particular 403 Forbidden, and
500 internal server errors during normal responses (i.e., unmodified requests).
Also note where any interesting headers are used. For example, Server: BIG-IP indicates that the site is load
balanced. Thus, if a site is load balanced and one server is incorrectly configured, then the tester might have to
make multiple requests to access the vulnerable server, depending on the type of load balancing used.

-
