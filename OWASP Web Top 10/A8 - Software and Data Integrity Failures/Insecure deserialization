What is serialization?

Serialization is the process of converting complex data structures, such as objects and their fields, 
into a "flatter" format that can be sent and received as a sequential stream of bytes. 

Serializing data makes it much simpler to:

Write complex data to inter-process memory, a file, or a database
Send complex data, for example, over a network, between different components of an application, or in an API call

Crucially, when serializing an object, its state is also persisted, i.e., 
the object's attributes are preserved, along with their assigned values.

The format of serialized data depends on the serialization method.

Common Serialization Formats

1. Text-Based: JSON, XML, YAML, CSV, BSON (partially readable).
2. Binary: Java Serialization, Python Pickle, Protocol Buffers, Avro, MessagePack, custom binary formats.
3. All are ultimately stored or transmitted as bytes, but their structure and behavior during deserialization differ.



Clarifying the "Stream of Bytes" Confusion

1. All serialized data is ultimately a stream of bytes at the lowest level because computers store and transmit data as bytes. 
Even text-based formats like JSON or XML are encoded into bytes (e.g., UTF-8 encoding) when sent over a network or saved to disk.

2. However, the logical format of serialized data (how it’s structured) varies. For example:
  a. JSON and XML are text-based and human-readable, but they’re still stored as bytes (e.g., UTF-8 encoded text).
  b. Binary formats like Java serialization or Python pickle are not human-readable and are designed as raw byte streams for 
  efficiency or language-specific features.

3. The confusion often arises because "serialized data" can refer to both the logical format (e.g., JSON, XML) and the physical representation (bytes).



Why This Matters for Insecure Deserialization

1. Text-Based Formats (JSON, XML, YAML):
These are generally safer because they don’t inherently execute code during deserialization. 
However, insecure deserialization can occur if the parser instantiates arbitrary classes or triggers unexpected behavior 
based on the data (e.g., XML External Entity attacks in XML).

2. Binary Formats (Java, Pickle):
These are more prone to insecure deserialization because they often allow the instantiation of arbitrary classes or 
execution of code during deserialization. 
For example, Python’s pickle can run arbitrary Python code, and Java’s deserialization can invoke methods like readObject.

-

Deserialization is the process of restoring this byte stream to a fully functional replica of the original object, 
in the exact state as when it was serialized. 

-

Example to Clarify

Image Upload Scenario:
  You upload photo.jpg via a web form.
  The browser sends the image as multipart/form-data in an HTTP POST request.
  The server (e.g., a Python Flask app) receives the file, checks its type (e.g., image/jpeg), and saves it to a folder or processes it with Pillow.
  No serialization/deserialization happens.

Insecure Deserialization Scenario:
  A website allows users to upload a file that it deserializes as a Python pickle object (e.g., pickle.load(uploaded_file)).
  An attacker uploads a malicious pickle file that executes harmful code during deserialization.
  This doesn’t apply to images unless the server mistakenly tries to deserialize the image as a pickle file 
  (which would fail or crash, not trigger deserialization).

-

Key Takeaways

Image Uploads:
Uploading an image does not involve serialization or deserialization in the context of insecure deserialization. 
The image is sent as a binary file and processed as such.
The client (browser) sends the image bytes, and the server receives and handles them (e.g., saving or processing with an image library).
Vulnerabilities with image uploads are more likely to involve file validation issues or image parser bugs, not insecure deserialization.

Insecure Deserialization:
This vulnerability arises when an application deserializes untrusted serialized data 
(e.g., Java objects, Python pickle, or JSON/XML mapped to objects) without proper validation, allowing attackers to manipulate objects or execute code.
It typically involves explicit serialized data uploads (e.g., .ser files, pickle files, or JSON with object mappings), not images.

When Could Images Be Related?
If an application incorrectly treats an image as serialized data (extremely rare and a major design flaw), it could trigger insecure deserialization.
More commonly, image-related vulnerabilities involve malicious file content or processing bugs, which are distinct from deserialization issues.

-

When Do Insecure Deserialization Vulnerabilities Occur?

1. Insecure deserialization vulnerabilities arise when a web application deserializes untrusted serialized data 
(e.g., a byte stream, JSON, or XML) that can control the creation of objects or execution of code.

2. This typically happens when:
  a. The application accepts serialized data (e.g., a Java serialized object, Python pickle data, or JSON/XML with object mappings) 
  from a user or external source.
  b. The deserialization process allows arbitrary classes, methods, or code to be executed, often due to insufficient validation.

Insecure deserialization vulnerabilities typically do not arise when uploading images because images are not serialized data 
in the way that triggers these vulnerabilities.

Examples:
  A Java application deserializes a user-uploaded ObjectInputStream and instantiates a malicious class.
  A PHP application uses unserialize() on user-controlled input, triggering a malicious __wakeup method.
  A JSON parser maps untrusted JSON to arbitrary objects without strict type checking.

-

How to identify insecure deserialization

solve labs

