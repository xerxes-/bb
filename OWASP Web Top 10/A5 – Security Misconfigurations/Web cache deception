It is a type of attack where an attacker tricks a website into storing private or sensitive information in a public cache (like a CDN or proxy), which anyone can then access.

-

🔍 Simple Example:

Imagine a website has a "My Account" page at:

https://example.com/account

This page is meant only for logged-in users, and should never be cached because it shows personal data.


Now the attacker tricks the site by visiting a fake URL like:

https://example.com/account/random.jpg

    The site still shows the account page, because it ignores the fake .jpg.

    The web cache sees .jpg and thinks it's a static file, so it stores the page.

    Now if anyone else visits that same URL, they see the attacker's account info!

-

Web caches

A web cache is a system (CDN or proxy server) that sits between the origin server and the user. 
When a client requests a static resource, the request is first directed to the cache. 
If the cache doesn't contain a copy of the resource (known as a cache miss), the request is forwarded to the origin server, which processes and responds to the request. 
The response is then sent to the cache before being sent to the user. 
The cache uses a preconfigured set of rules to determine whether to store the response.

When a request for the same static resource is made in the future, the cache serves the stored copy of the response directly to the user (known as a cache hit). 

-

Cache Rules

They tell browsers or proxy servers (like CDNs) what content to store, how long to store it, and who can use it.

They are controlled using HTTP headers, mainly:

    Cache-Control

    Expires

    ETag

    Last-Modified

-

📦 Common Cache-Control Rules:

Rule	                    What it Means	                                Example

no-store	                Don’t save it at all	                        Login pages
no-cache	                Revalidate before using	                        Dynamic data
private	                    Only browser can cache	                        User dashboard
public	                    Can be cached by anyone	                        Images, CSS
max-age=3600	            Cache for 1 hour	                            Static assets
s-maxage=3600	            Cache for 1 hour on shared (proxy) cache	    CDN-level caching



🧠 Example:

1. Static file (CSS or image):

Cache-Control: public, max-age=86400

    Cache this publicly for 1 day (86400 seconds).

2. User-specific page (like /account):

Cache-Control: private, no-store

    Don’t cache this or let others store it — it’s sensitive.

-

🚫 Misuse Example (Web Cache Deception):

If a private page returns:

Cache-Control: public

…then the sensitive info can be cached, leading to leaks.

-

Cache keys

When the cache receives an HTTP request, it must decide whether there is a cached response that it can serve directly, or whether 
it has to forward the request to the origin server. 
The cache makes this decision by generating a 'cache key' from elements of the HTTP request. 
Typically, this includes the URL path and query parameters, but it can also include a variety of other elements like headers and content type.

If the incoming request's cache key matches that of a previous request, the cache considers them to be equivalent and serves a copy of the cached response. 

-

✅ In simple terms:

    Cache Key = How the cache identifies a request (like a lookup key).

    Cache Rule (Headers) = Decides if the response can be stored and reused.


🧠 Step-by-Step:

🪪 1. Cache Key is used first (to look up)

When a request comes in, the cache (like a CDN or browser) builds a cache key based on things like:

    URL

    Query string

    HTTP method

    Headers (sometimes Accept, Authorization, etc.)

    It checks: "Have I seen this before?"


🧾 2. Cache Rules (headers) are checked

If there is a match, the cache looks at the response's cache rules like:

    Cache-Control

    Expires

    ETag

    It asks: "Am I allowed to reuse this response?"


🧰 Example:

Request:

GET /account/profile.jpg

If cache key is just the URL (/account/profile.jpg)...


And response says:

Cache-Control: public, max-age=600

Then it might get cached publicly, even if it shows private data, leading to web cache deception.

-

Q.  (like a CDN or browser)  why you mentioned browser?

✅ Why Browser Cache Matters:

A browser also stores responses to speed up page loads.

    If you visit a site, the browser cache can reuse static files (like CSS, JS, images) instead of re-downloading them.

    It uses the same cache headers: Cache-Control, ETag, etc.

    It respects rules like private, no-store, and max-age.


So when I said “cache like a CDN or browser”, I meant:

    Browser cache is private (only for that user).

    CDN or reverse proxy cache is shared (may serve cached content to many users).


⚠️ Why it matters in security:

If a sensitive page is cached by a shared cache (CDN), it's dangerous.
If cached by a browser, it's safer — because only that user can see it.

    That’s why we use Cache-Control: private to tell: “Okay for browser, but NOT for CDN.”

-

💡 Cache Flow Summary:

    User requests URL → CDN checks for cached copy.

    Cache hit → Serve from CDN (fast).

    Cache miss → Go to origin → Serve to user → Maybe cache it (if rules allow).


🔐 Why this matters in security:

    On a cache miss, if the CDN caches a page that contains user-specific data, and later serves that to others (on a cache hit) → Web Cache Deception or Leakage.

-

❓If a response has Cache-Control: no-store, does it still go through the CDN?

✅ Yes, it goes through the CDN — but it won’t be cached.

-




