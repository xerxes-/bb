Allows an attacker to cause the server-side application to make requests to an unintended location.

In a typical SSRF attack, the attacker might cause the server to make a connection to internal-only services within the organization's infrastructure. 
In other cases, they may be able to force the server to connect to arbitrary external systems. 
This could leak sensitive data, such as authorization credentials.

-

Common SSRF attacks

1. SSRF attacks against the server

In an SSRF attack against the server, the attacker causes the application to make an HTTP request back to the server that is hosting the application, 
via its loopback network interface. 
This typically involves supplying a URL with a hostname like 127.0.0.1 (a reserved IP address that points to the loopback adapter) or 
localhost (a commonly used name for the same adapter).

ex:
POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1

This causes the server to make a request to the specified URL, retrieve the stock status, and return this to the user.

In this example, an attacker can modify the request to specify a URL local to the server:

POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://localhost/admin

The server fetches the contents of the /admin URL and returns it to the user.
An attacker can visit the /admin URL, but the administrative functionality is normally only accessible to authenticated users.
In this case, you can manipulate the request parameters in Burp to make changes even though you can't see the page.


Why do applications behave in this way, and implicitly trust requests that come from the local machine? This can arise for various reasons:

a. The access control check might be implemented in a different component that sits in front of the application server. 
When a connection is made back to the server, the check is bypassed.

b. For disaster recovery purposes, the application might allow administrative access without logging in, to any user coming from the local machine. 
This provides a way for an administrator to recover the system if they lose their credentials. 
This assumes that only a fully trusted user would come directly from the server.

c. The administrative interface might listen on a different port number to the main application, and might not be reachable directly by users.

These kind of trust relationships, where requests originating from the local machine are handled differently than ordinary requests, 
often make SSRF into a critical vulnerability.

2. SSRF attacks against other back-end systems

In some cases, the application server is able to interact with back-end systems that are not directly reachable by users. 
These systems often have non-routable private IP addresses. 
The back-end systems are normally protected by the network topology, so they often have a weaker security posture. 
In many cases, internal back-end systems contain sensitive functionality that can be accessed without authentication by anyone who is 
able to interact with the systems.

In the previous example, imagine there is an administrative interface at the back-end URL https://192.168.0.68/admin. 
An attacker can submit the following request to exploit the SSRF vulnerability, and access the administrative interface:

POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://192.168.0.68/admin

-

Circumventing common SSRF defenses

It is common to see applications containing SSRF behavior together with defenses aimed at preventing malicious exploitation. 
Often, these defenses can be circumvented.

1. SSRF with blacklist-based input filters

Some applications block input containing hostnames like 127.0.0.1 and localhost, or sensitive URLs like /admin. 

In this situation, you can often circumvent the filter using the following techniques:

a. Use an alternative IP representation of 127.0.0.1, such as 2130706433, 017700000001, or 127.1.

b. Register your own domain name that resolves to 127.0.0.1. You can use spoofed.burpcollaborator.net for this purpose.

c. Obfuscate blocked strings using URL encoding or case variation.

d. Provide a URL that you control, which redirects to the target URL. 
Try using different redirect codes, as well as different protocols for the target URL. 
For example, switching from an http: to https: URL during the redirect has been shown to bypass some anti-SSRF filters.

2. SSRF with whitelist-based input filters

Some applications only allow inputs that match, a whitelist of permitted values. 
The filter may look for a match at the beginning of the input, or contained within in it. 
You may be able to bypass this filter by exploiting inconsistencies in URL parsing.

The URL specification contains a number of features that are likely to be overlooked when URLs implement ad-hoc parsing and validation using this method:

a. You can embed credentials in a URL before the hostname, using the @ character. For example:

https://expected-host:fakepassword@evil-host

b. You can use the # character to indicate a URL fragment. For example:

https://evil-host#expected-host

c. You can leverage the DNS naming hierarchy to place required input into a fully-qualified DNS name that you control. For example:

https://expected-host.evil-host

d. You can URL-encode characters to confuse the URL-parsing code. 
This is particularly useful if the code that implements the filter handles URL-encoded characters differently than the code that 
performs the back-end HTTP request. 
You can also try double-encoding characters; some servers recursively URL-decode the input they receive, which can lead to further discrepancies.

e. You can use combinations of these techniques together.

3. Bypassing SSRF filters via open redirection

In the previous example, imagine the user-submitted URL is strictly validated to prevent malicious exploitation of the SSRF behavior. 
However, the application whose URLs are allowed contains an open redirection vulnerability. 
Provided the API used to make the back-end HTTP request supports redirections, 
you can construct a URL that satisfies the filter and results in a redirected request to the desired back-end target.

For example, the application contains an open redirection vulnerability in which the following URL:

/product/nextProduct?currentProductId=6&path=http://evil-user.net

returns a redirection to:

http://evil-user.net

You can leverage the open redirection vulnerability to bypass the URL filter, and exploit the SSRF vulnerability as follows:

POST /product/stock HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 118

stockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&path=http://192.168.0.68/admin

This SSRF exploit works because the application first validates that the supplied stockAPI URL is on an allowed domain, which it is. 
The application then requests the supplied URL, which triggers the open redirection. 
It follows the redirection, and makes a request to the internal URL of the attacker's choosing.

-

Blind SSRF vulnerabilities

They arise when an application can be induced to issue a back-end HTTP request to a supplied URL, 
but the response from the back-end request is not returned in the application's front-end response.

need to check

-

Finding hidden attack surface for SSRF vulnerabilities

need to check

-
