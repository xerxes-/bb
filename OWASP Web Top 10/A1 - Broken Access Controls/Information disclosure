It is when a website unintentionally reveals sensitive information to its users. 

-

Examples of information disclosure

Revealing the names of hidden directories, their structure, and their contents via a robots.txt file or directory listing
Providing access to source code files via temporary backups
Explicitly mentioning database table or column names in error messages
Unnecessarily exposing highly sensitive information, such as credit card details
Hard-coding API keys, IP addresses, database credentials, and so on in the source code
Hinting at the existence or absence of resources, usernames, and so on via subtle differences in application behavior

-

Test for information disclosure vulnerabilities

1.Fuzzing

If you identify interesting parameters, you can try submitting unexpected data types and specially crafted 
fuzz strings to see what effect this has. 
Pay close attention; although responses sometimes explicitly disclose interesting information, 
they can also hint at the application's behavior more subtly. 
For example, this could be a slight difference in the time taken to process the request. 
Even if the content of an error message doesn't disclose anything, 
sometimes the fact that one error case was encountered instead of another one is useful information in itself.

2. Using Burp Scanner

3. Using Burp's engagement tools

Access the engagement tools from the context menu - just right-click on any HTTP message, Burp Proxy entry, or item in 
the site map and go to "Engagement tools".

The following tools are particularly useful in this context.

Search
You can use this tool to look for any expression within the selected item. 
You can fine-tune the results using various advanced search options, such as regex search or negative search. 
This is useful for quickly finding occurrences (or absences) of specific keywords of interest.

Find comments
You can use this tool to quickly extract any developer comments found in the selected item. 
It also provides tabs to instantly access the HTTP request/response cycle in which each comment was found.

Discover content
You can use this tool to identify additional content and functionality that is not linked from the website's visible content. 
This can be useful for finding additional directories and files that won't necessarily appear in the site map automatically.

4. Engineering informative responses

For example, submitting an invalid parameter value might lead to a stack trace or debug response that contains interesting details. 
You can sometimes cause error messages to disclose the value of your desired data in the response.

-

Common sources of information disclosure

1. Files for web crawlers

Check /robots.txt and /sitemap.xml

2. Directory listings

Web servers can be configured to automatically list the contents of directories that do not have an index page present. 
This can aid an attacker to access those resources. 

3. Developer comments

4. Error messages

One of the most common causes of information disclosure is verbose error messages. 
As a general rule, you should pay close attention to all error messages you encounter during auditing.

5. Debugging data

Debugging info in websites, useful for development, can be exploited by attackers if exposed in production.
Leaked logs or error messages reveal application behavior and runtime state, aiding attackers.
Access to debug files provides clues for crafting malicious input to manipulate application state.

6. User account pages

For example, consider a website that determines which user's account page to load based on a user parameter:

GET /user/personal-info?user=carlos

An attacker may not be able to load another users' account page entirely, 
but the logic for fetching and rendering the user's registered email address, for example, might not check that 
the user parameter matches the user that is currently logged in. 
In this case, simply changing the user parameter would allow an attacker to display arbitrary users' email addresses on their own account page.

7. Source code disclosure via backup files

When mapping out a website, you might find that some source code files are referenced explicitly. 
Unfortunately, requesting them does not usually reveal the code itself. 
When a server handles files with a particular extension, such as .php, it will typically execute the code, 
rather than simply sending it to the client as text. 
However, in some situations, you can trick a website into returning the contents of the file instead. 
For example, text editors often generate temporary backup files while the original file is being edited. 
These temporary files are usually indicated in some way, such as by appending a tilde (~) to the filename or adding a different file extension. 
Requesting a code file using a backup file extension can sometimes allow you to read the contents of the file in the response.

8. Information disclosure due to insecure configuration

Websites are sometimes vulnerable as a result of improper configuration. 
This is especially common due to the widespread use of third-party technologies, 
whose vast array of configuration options are not necessarily well-understood by those implementing them.

In other cases, developers might forget to disable various debugging options in the production environment. 
For example, the HTTP TRACE method is designed for diagnostic purposes. 
If enabled, the web server will respond to requests that use the TRACE method by echoing in the response the exact request that was received. 
This behavior is often harmless, but occasionally leads to information disclosure, 
such as the name of internal authentication headers that may be appended to requests by reverse proxies.

9. Version control history

Virtually all websites are developed using some form of version control system, such as Git. 
By default, a Git project stores all of its version control data in a folder called .git. 
Occasionally, websites expose this directory in the production environment. In this case, you might be able to access it by simply browsing to /.git.








