These vulnerabilities enable an attacker to read arbitrary files on the server that is running an application. 
This might include:

Application code and data.
Credentials for back-end systems.
Sensitive operating system files.

-

In some cases, an attacker might be able to write to arbitrary files on the server, 
allowing them to modify application data or behavior, and ultimately take full control of the server.

-

Reading arbitrary files via path traversal

Imagine a shopping application that displays images of items for sale. 
This might load an image using the following HTML:

<img src="/loadImage?filename=218.png">

The loadImage URL takes a filename parameter and returns the contents of the specified file. 
The image files are stored on disk in the location /var/www/images/. 
To return an image, the application appends the requested filename to this base directory and uses a filesystem API to read the contents of the file.

If the application implements no defenses against path traversal attacks, 
we can exploit to access sensitive files on server:

https://insecure-website.com/loadImage?filename=../../../etc/passwd

On Windows-based server:

https://insecure-website.com/loadImage?filename=..\..\..\windows\win.ini

-

Common obstacles to exploiting path traversal vulnerabilities

If an application strips or blocks directory traversal sequences from the user-supplied filename, it might be possible to bypass the defense:

1. You might be able to use an absolute path from the filesystem root, such as filename=/etc/passwd, 
to directly reference a file without using any traversal sequences.

2. You might be able to use nested traversal sequences, such as ....// or ....\/
These revert to simple traversal sequences when the inner sequence is stripped.

3. In some contexts, such as in a URL path or the filename parameter of a multipart/form-data request, 
web servers may strip any directory traversal sequences before passing your input to the application. 
You can sometimes bypass this kind of sanitization by URL encoding, or even double URL encoding, 
the ../ characters. 
This results in %2e%2e%2f and %252e%252e%252f respectively. 
Various non-standard encodings, such as ..%c0%af or ..%ef%bc%8f, may also work.

[For Burp Suite Professional users, Burp Intruder provides the predefined payload list Fuzzing - path traversal. 
This contains some encoded path traversal sequences that you can try]

4. An application may require the user-supplied filename to start with the expected base folder, such as /var/www/images. 
In this case, it might be possible to include the required base folder followed by suitable traversal sequences. 
For example: filename=/var/www/images/../../../etc/passwd

5. An application may require the user-supplied filename to end with an expected file extension, such as .png. 
In this case, it might be possible to use a null byte to effectively terminate the file path before the required extension. 
For example: filename=../../../etc/passwd%00.png

-
