Authentication is the process of verifying that a user is who they claim to be. 
Authorization involves verifying whether a user is allowed to do something. 

-

HTTP basic authentication

Although fairly old, its relative simplicity and ease of implementation means you might sometimes see HTTP basic authentication being used. 
In HTTP basic authentication, the client receives an authentication token from the server, which is constructed by concatenating the username and password, and encoding it in Base64. 
This token is stored and managed by the browser, which automatically adds it to the Authorization header of every subsequent request as follows:

Authorization: Basic base64(username:password)

For a number of reasons, this is generally not considered a secure authentication method. 
Firstly, it involves repeatedly sending the user's login credentials with every request. 
Unless the website also implements HSTS, user credentials are open to being captured in a man-in-the-middle attack. 

-

Two-factor authentication tokens are sent via SMS or generated by an app like Google Authenticator.

1. Bypassing two-factor authentication

At times, the implementation of two-factor authentication is flawed to the point where it can be bypassed entirely.

If the user is first prompted to enter a password, and then prompted to enter a verification code on a separate page, the user is effectively in a "logged in" state before 
they have entered the verification code. 
In this case, it is worth testing to see if you can directly skip to "logged-in only" pages after completing the first authentication step. 
Occasionally, you will find that a website doesn't actually check whether or not you completed the second step before loading the page. 

2. Flawed two-factor verification logic

