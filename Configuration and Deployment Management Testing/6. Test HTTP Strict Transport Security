The HTTP Strict Transport Security (HSTS) feature lets a web application inform the browser through the use of a
special response header that it should never establish a connection to the specified domain servers using unencrypted HTTP.
Instead, it should automatically establish all connection requests to access the site through HTTPS. 
It also prevents users from overriding certificate errors.

-

Here’s an example of the HSTS header implementation:
Strict-Transport-Security: max-age=31536000; includeSubDomains

The HTTP strict transport security header uses two directives:
max-age : to indicate the number of seconds that the browser should automatically convert all HTTP requests to
HTTPS.

includeSubDomains : to indicate that all related sub-domains must use HTTPS.

preload Unofficial: to indicate that the domain(s) are on the preload list(s) and that browsers should never
connect without HTTPS.
This is supported by all major browsers but is not official part of the specification. (See hstspreload.org for
more information.)

-

Test Objectives

Review the HSTS header and its validity.

-

How to Test

The presence of the HSTS header can be confirmed by examining the server’s response through an intercepting proxy
or by using curl as follows:

$ curl -s -D- https://owasp.org | grep -i strict
Strict-Transport-Security: max-age=31536000

-s: Enables silent mode in curl, suppressing progress meter and error messages for cleaner output.
-D-: Dumps the HTTP response headers to stdout (standard output), indicated by the -
-i: In grep, makes the search case-insensitive, matching "strict," "Strict," or any variation.
|: Pipes the output of curl (HTTP response headers only, due to -D-) to grep for filtering lines containing "strict."

-
